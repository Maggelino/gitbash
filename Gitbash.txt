Git bash manual...

working copy > staging area > repository
creating a file = working copy 
add = staging area
commit = repository (git keeps track of files)

-creating files, adding to stage and commiting to repository
1. $ git --version
2. $ git config --global user.name "Mariann McDonald" 
3. $ git config --global user.email "ma_mcdonald@hotmail.com" (@ = alt +gr)
4. $ cd ~ (go to home before Desktop and Project)
5. $ cd Desktop
6. $ cd Project folder (this project called gitbash)
7. $ git init (makes git to function)
8 create a text file(s) in the folder gitbash and save as for example first.txt
9. $ git add first.txt
10. $ git commit -m "This is my first commit" (snapshot, you can come back to)
11. $ git status (view status)

-editing files
12. $ git add . (. adds multiple files to the stage)
13. $ git status (view status)
14. $ git commit -m (commits multiple files at once to the repository)

-working copy VS repository
15. $ git diff 

-stage VS repository
16. $ git diff --staged

-delete files, different ways and commiting that change
17. $ git rm third.txt (removes both working copy and repository)
18. $ git commit -m "Deleted the third txt file" 

-change file name
19. $ git mv second.txt sound.txt

-create a folder called Music
-in gitbash move file to folder and give a new name
20. $ git mv sound.txt Music/party.txt

-back from stage to working copy
$ git reset HEAD about.html 

-back from repository to working copy
$ git checkout -- index.html 

-old versions back from repository
$ git ......

$ git commit -am "Some info text" (directly from working copy to repository, but notice grabs all files at once, only for a few files)
$ git log (view all the commits)
$ git log --author=Mariann" (view commits from specific person)
$ git commit -m "remove file1.txt"
$ git rm file.txt (removes file from repo and deletes it from local file system)
$ git rm --cached file.txt (remove from repo but not delete from local file system)
$ git log (view all the commits)
$ pwd (find out where Git is looking at right now)
$ cd .. (takes you backwards)
$ ls (lists all folders)
$ ls  -la (shows all files, DO NOT TOUCH THE HIDDEN FILES)
$ clear (för att städa, dvs tar ej bort)
$ git help (help menue)

______________________________________________________________

Create a public github repository

Connect git to github...

$ git remote add gitbash (+ github url)

$ git remote 
gitbash

$ git push -u gitbash master (push = adds files)(fetching = getting files)
(fill in username when pops up...)
(fill in password when pops up...)







